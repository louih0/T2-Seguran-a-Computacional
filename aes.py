from key_expansion import key_expansion
import numpy as np
from collections import deque

def add_round_key(extended_key, hex_text, round):
    start = round * 4
    key_matrix = np.array(extended_key[start:start+4]).transpose()
    text_matrix = np.array(hex_text)
    if round == 0:
        text_matrix = text_matrix.transpose()
    key_matrix = np.array([[int(x, 16) for x in row] for row in key_matrix])
    text_matrix = np.array([[int(x, 16) for x in row] for row in text_matrix])

    result = key_matrix ^ text_matrix

    result = np.array([[hex(x) for x in row] for row in result])

    return result

def sub(text):
    s_box = [
        [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
        0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
        [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
        0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
        [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
        0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
        [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
        0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
        [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
        0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
        [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
        0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
        [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
        0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
        [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
        0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
        [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
        0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
        [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
        0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
        [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
        0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
        [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
        0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
        [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
        0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
        [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
        0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
        [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
        0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
        [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
        0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
    ]

    text = '0x' + text[2:].zfill(2)
    sub_text = s_box[int(text[2],16)][int(text[3],16)]

    return hex(sub_text)

def shift_row(matrix):
    for i in range(4):
        row = deque(matrix[i])
        row.rotate(-i)
        matrix[i] = list(row) 
    return matrix

def mix_column(matrix):
    E_table = {
    0x00: 0x01, 0x01: 0x03, 0x02: 0x05, 0x03: 0x0F, 0x04: 0x11, 0x05: 0x33, 0x06: 0x55, 0x07: 0xFF,
    0x08: 0x1A, 0x09: 0x2E, 0x0A: 0x72, 0x0B: 0x96, 0x0C: 0xA1, 0x0D: 0xF8, 0x0E: 0x13, 0x0F: 0x35,
    0x10: 0x5F, 0x11: 0xE1, 0x12: 0x38, 0x13: 0x48, 0x14: 0xD8, 0x15: 0x73, 0x16: 0x95, 0x17: 0xA4,
    0x18: 0xF7, 0x19: 0x02, 0x1A: 0x06, 0x1B: 0x0A, 0x1C: 0x1E, 0x1D: 0x22, 0x1E: 0x66, 0x1F: 0xAA,
    0x20: 0xE5, 0x21: 0x34, 0x22: 0x5C, 0x23: 0xE4, 0x24: 0x37, 0x25: 0x59, 0x26: 0xEB, 0x27: 0x26,
    0x28: 0x6A, 0x29: 0xBE, 0x2A: 0xD9, 0x2B: 0x70, 0x2C: 0x90, 0x2D: 0xAB, 0x2E: 0xE6, 0x2F: 0x31,
    0x30: 0x53, 0x31: 0xF5, 0x32: 0x04, 0x33: 0x0C, 0x34: 0x14, 0x35: 0x3C, 0x36: 0x44, 0x37: 0xCC,
    0x38: 0x4F, 0x39: 0xD1, 0x3A: 0x68, 0x3B: 0xB8, 0x3C: 0xD3, 0x3D: 0x6E, 0x3E: 0xB2, 0x3F: 0xCD,
    0x40: 0x4C, 0x41: 0xD4, 0x42: 0x67, 0x43: 0xA9, 0x44: 0xE0, 0x45: 0x3B, 0x46: 0x4D, 0x47: 0xD7,
    0x48: 0x62, 0x49: 0xA6, 0x4A: 0xF1, 0x4B: 0x08, 0x4C: 0x18, 0x4D: 0x28, 0x4E: 0x78, 0x4F: 0x88,
    0x50: 0x83, 0x51: 0x9E, 0x52: 0xB9, 0x53: 0xD0, 0x54: 0x6B, 0x55: 0xBD, 0x56: 0xDC, 0x57: 0x7F,
    0x58: 0x81, 0x59: 0x98, 0x5A: 0xB3, 0x5B: 0xCE, 0x5C: 0x49, 0x5D: 0xDB, 0x5E: 0x76, 0x5F: 0x9A,
    0x60: 0xB5, 0x61: 0xC4, 0x62: 0x57, 0x63: 0xF9, 0x64: 0x10, 0x65: 0x30, 0x66: 0x50, 0x67: 0xF0,
    0x68: 0x0B, 0x69: 0x1D, 0x6A: 0x27, 0x6B: 0x69, 0x6C: 0xBB, 0x6D: 0xD6, 0x6E: 0x61, 0x6F: 0xA3,
    0x70: 0xFE, 0x71: 0x19, 0x72: 0x2B, 0x73: 0x7D, 0x74: 0x87, 0x75: 0x92, 0x76: 0xAD, 0x77: 0xEC,
    0x78: 0x2F, 0x79: 0x71, 0x7A: 0x93, 0x7B: 0xAE, 0x7C: 0xE9, 0x7D: 0x20, 0x7E: 0x60, 0x7F: 0xA0,
    0x80: 0xFB, 0x81: 0x16, 0x82: 0x3A, 0x83: 0x4E, 0x84: 0xD2, 0x85: 0x6D, 0x86: 0xB7, 0x87: 0xC2,
    0x88: 0x5D, 0x89: 0xE7, 0x8A: 0x32, 0x8B: 0x56, 0x8C: 0xFA, 0x8D: 0x15, 0x8E: 0x3F, 0x8F: 0x41,
    0x90: 0xC3, 0x91: 0x5E, 0x92: 0xE2, 0x93: 0x3D, 0x94: 0x47, 0x95: 0xC9, 0x96: 0x40, 0x97: 0xC0,
    0x98: 0x5B, 0x99: 0xED, 0x9A: 0x2C, 0x9B: 0x74, 0x9C: 0x9C, 0x9D: 0xBF, 0x9E: 0xDA, 0x9F: 0x75,
    0xA0: 0x9F, 0xA1: 0xBA, 0xA2: 0xD5, 0xA3: 0x64, 0xA4: 0xAC, 0xA5: 0xEF, 0xA6: 0x2A, 0xA7: 0x7E,
    0xA8: 0x82, 0xA9: 0x9D, 0xAA: 0xBC, 0xAB: 0xDF, 0xAC: 0x7A, 0xAD: 0x8E, 0xAE: 0x89, 0xAF: 0x80,
    0xB0: 0x9B, 0xB1: 0xB6, 0xB2: 0xC1, 0xB3: 0x58, 0xB4: 0xE8, 0xB5: 0x23, 0xB6: 0x65, 0xB7: 0xAF,
    0xB8: 0xEA, 0xB9: 0x25, 0xBA: 0x6F, 0xBB: 0xB1, 0xBC: 0xC8, 0xBD: 0x43, 0xBE: 0xC5, 0xBF: 0x54,
    0xC0: 0xFC, 0xC1: 0x1F, 0xC2: 0x21, 0xC3: 0x63, 0xC4: 0xA5, 0xC5: 0xF4, 0xC6: 0x07, 0xC7: 0x09,
    0xC8: 0x1B, 0xC9: 0x2D, 0xCA: 0x77, 0xCB: 0x99, 0xCC: 0xB0, 0xCD: 0xCB, 0xCE: 0x46, 0xCF: 0xCA,
    0xD0: 0x45, 0xD1: 0xCF, 0xD2: 0x4A, 0xD3: 0xDE, 0xD4: 0x79, 0xD5: 0x8B, 0xD6: 0x86, 0xD7: 0x91,
    0xD8: 0xA8, 0xD9: 0xE3, 0xDA: 0x3E, 0xDB: 0x42, 0xDC: 0xC6, 0xDD: 0x51, 0xDE: 0xF3, 0xDF: 0x0E,
    0xE0: 0x12, 0xE1: 0x36, 0xE2: 0x5A, 0xE3: 0xEE, 0xE4: 0x29, 0xE5: 0x7B, 0xE6: 0x8D, 0xE7: 0x8C,
    0xE8: 0x8F, 0xE9: 0x8A, 0xEA: 0x85, 0xEB: 0x94, 0xEC: 0xA7, 0xED: 0xF2, 0xEE: 0x0D, 0xEF: 0x17,
    0xF0: 0x39, 0xF1: 0x4B, 0xF2: 0xDD, 0xF3: 0x7C, 0xF4: 0x84, 0xF5: 0x97, 0xF6: 0xA2, 0xF7: 0xFD,
    0xF8: 0x1C, 0xF9: 0x24, 0xFA: 0x6C, 0xFB: 0xB4, 0xFC: 0xC7, 0xFD: 0x52, 0xFE: 0xF6, 0xFF: 0x01}

    L_table = {
        0x00: 00, 0x01: 0x00, 0x02: 0x19, 0x03: 0x01, 0x04: 0x32, 0x05: 0x02, 0x06: 0x1A, 0x07: 0xC6, 0x08: 0x4B,
        0x09: 0xC7, 0x0A: 0x1B, 0x0B: 0x68, 0x0C: 0x33, 0x0D: 0xEE, 0x0E: 0xDF, 0x0F: 0x03,
        0x10: 0x64, 0x11: 0x04, 0x12: 0xE0, 0x13: 0x0E, 0x14: 0x34, 0x15: 0x8D, 0x16: 0x81, 0x17: 0xEF,
        0x18: 0x4C, 0x19: 0x71, 0x1A: 0x08, 0x1B: 0xC8, 0x1C: 0xF8, 0x1D: 0x69, 0x1E: 0x1C, 0x1F: 0xC1,
        0x20: 0x7D, 0x21: 0xC2, 0x22: 0x1D, 0x23: 0xB5, 0x24: 0xF9, 0x25: 0xB9, 0x26: 0x27, 0x27: 0x6A,
        0x28: 0x4D, 0x29: 0xE4, 0x2A: 0xA6, 0x2B: 0x72, 0x2C: 0x9A, 0x2D: 0xC9, 0x2E: 0x09, 0x2F: 0x78,
        0x30: 0x65, 0x31: 0x2F, 0x32: 0x8A, 0x33: 0x05, 0x34: 0x21, 0x35: 0x0F, 0x36: 0xE1, 0x37: 0x24,
        0x38: 0x12, 0x39: 0xF0, 0x3A: 0x82, 0x3B: 0x45, 0x3C: 0x35, 0x3D: 0x93, 0x3E: 0xDA, 0x3F: 0x8E,
        0x40: 0x96, 0x41: 0x8F, 0x42: 0xDB, 0x43: 0xBD, 0x44: 0x36, 0x45: 0xD0, 0x46: 0xCE, 0x47: 0x94,
        0x48: 0x13, 0x49: 0x5C, 0x4A: 0xD2, 0x4B: 0xF1, 0x4C: 0x40, 0x4D: 0x46, 0x4E: 0x83, 0x4F: 0x38,
        0x50: 0x66, 0x51: 0xDD, 0x52: 0xFD, 0x53: 0x30, 0x54: 0xBF, 0x55: 0x06, 0x56: 0x8B, 0x57: 0x62,
        0x58: 0xB3, 0x59: 0x25, 0x5A: 0xE2, 0x5B: 0x98, 0x5C: 0x22, 0x5D: 0x88, 0x5E: 0x91, 0x5F: 0x10,
        0x60: 0x7E, 0x61: 0x6E, 0x62: 0x48, 0x63: 0xC3, 0x64: 0xA3, 0x65: 0xB6, 0x66: 0x1E, 0x67: 0x42,
        0x68: 0x3A, 0x69: 0x6B, 0x6A: 0x28, 0x6B: 0x54, 0x6C: 0xFA, 0x6D: 0x85, 0x6E: 0x3D, 0x6F: 0xBA,
        0x70: 0x2B, 0x71: 0x79, 0x72: 0x0A, 0x73: 0x15, 0x74: 0x9B, 0x75: 0x9F, 0x76: 0x5E, 0x77: 0xCA,
        0x78: 0x4E, 0x79: 0xD4, 0x7A: 0xAC, 0x7B: 0xE5, 0x7C: 0xF3, 0x7D: 0x73, 0x7E: 0xA7, 0x7F: 0x57,
        0x80: 0xAF, 0x81: 0x58, 0x82: 0xA8, 0x83: 0x50, 0x84: 0xF4, 0x85: 0xEA, 0x86: 0xD6, 0x87: 0x74,
        0x88: 0x4F, 0x89: 0xAE, 0x8A: 0xE9, 0x8B: 0xD5, 0x8C: 0xE7, 0x8D: 0xE6, 0x8E: 0xAD, 0x8F: 0xE8,
        0x90: 0x2C, 0x91: 0xD7, 0x92: 0x75, 0x93: 0x7A, 0x94: 0xEB, 0x95: 0x16, 0x96: 0x0B, 0x97: 0xF5,
        0x98: 0x59, 0x99: 0xCB, 0x9A: 0x5F, 0x9B: 0xB0, 0x9C: 0x9C, 0x9D: 0xA9, 0x9E: 0x51, 0x9F: 0xA0,
        0xA0: 0x7F, 0xA1: 0x0C, 0xA2: 0xF6, 0xA3: 0x6F, 0xA4: 0x17, 0xA5: 0xC4, 0xA6: 0x49, 0xA7: 0xEC,
        0xA8: 0xD8, 0xA9: 0x43, 0xAA: 0x1F, 0xAB: 0x2D, 0xAC: 0xA4, 0xAD: 0x76, 0xAE: 0x7B, 0xAF: 0xB7,
        0xB0: 0xCC, 0xB1: 0xBB, 0xB2: 0x3E, 0xB3: 0x5A, 0xB4: 0xFB, 0xB5: 0x60, 0xB6: 0xB1, 0xB7: 0x86,
        0xB8: 0x3B, 0xB9: 0x52, 0xBA: 0xA1, 0xBB: 0x6C, 0xBC: 0xAA, 0xBD: 0x55, 0xBE: 0x29, 0xBF: 0x9D,
        0xC0: 0x97, 0xC1: 0xB2, 0xC2: 0x87, 0xC3: 0x90, 0xC4: 0x61, 0xC5: 0xBE, 0xC6: 0xDC, 0xC7: 0xFC,
        0xC8: 0xBC, 0xC9: 0x95, 0xCA: 0xCF, 0xCB: 0xCD, 0xCC: 0x37, 0xCD: 0x3F, 0xCE: 0x5B, 0xCF: 0xD1,
        0xD0: 0x53, 0xD1: 0x39, 0xD2: 0x84, 0xD3: 0x3C, 0xD4: 0x41, 0xD5: 0xA2, 0xD6: 0x6D, 0xD7: 0x47,
        0xD8: 0x14, 0xD9: 0x2A, 0xDA: 0x9E, 0xDB: 0x5D, 0xDC: 0x56, 0xDD: 0xF2, 0xDE: 0xD3, 0xDF: 0xAB,
        0xE0: 0x44, 0xE1: 0x11, 0xE2: 0x92, 0xE3: 0xD9, 0xE4: 0x23, 0xE5: 0x20, 0xE6: 0x2E, 0xE7: 0x89,
        0xE8: 0xB4, 0xE9: 0x7C, 0xEA: 0xB8, 0xEB: 0x26, 0xEC: 0x77, 0xED: 0x99, 0xEE: 0xE3, 0xEF: 0xA5,
        0xF0: 0x67, 0xF1: 0x4A, 0xF2: 0xED, 0xF3: 0xDE, 0xF4: 0xC5, 0xF5: 0x31, 0xF6: 0xFE, 0xF7: 0x18,
        0xF8: 0x0D, 0xF9: 0x63, 0xFA: 0x8C, 0xFB: 0x80, 0xFC: 0xC0, 0xFD: 0xF7, 0xFE: 0x70, 0xFF: 0x07}

    CONSTANTS = [[0x02,0x03,0x01,0x01], [0x01,0x02,0x03,0x01],
                [0x01,0x01,0x02,0x03], [0x03,0x01,0x01,0x02]]    
    matrix_res = []
    for row in range(len(matrix)):
        line = []
        for column in range(len(matrix[row])):
            result = 0
            for i in range(4):
                L_res = L_table[CONSTANTS[row][i]] + L_table[int(matrix[i][column],16)]
                if(L_res > 0xFF):
                    L_res -= 0xFF
                L_res = E_table[L_res]
                result ^= L_res
            line.append(hex(result))
        matrix_res.append(line)
    return matrix_res

def aes(plaintext, key, rounds):
    size = 16
    hex_text = [hex(ord(c)) for c in plaintext]
    hex_text = [hex_text[i:i + 4] for i in range(0, 16, 4)]
    extended_key = key_expansion(key, rounds)
    matrix = add_round_key(extended_key, hex_text, 0)
    for round in range(rounds-1):
        matrix = [[sub(text) for text in row] for row in matrix]
        matrix = shift_row(matrix)
        matrix = mix_column(matrix)
        matrix = add_round_key(extended_key, matrix,round+1)
    
    matrix = [[sub(text) for text in row] for row in matrix]
    matrix = shift_row(matrix)
    matrix = add_round_key(extended_key, matrix,round+1)
    return matrix




